package com.ewaytek.manage.api.controller.department;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.ewaytek.common.utils.Result;
import com.ewaytek.common.validator.ValidatorUtils;
import com.ewaytek.common.validator.group.AddGroup;
import com.ewaytek.common.validator.group.UpdateGroup;
import com.ewaytek.model.Department;
import com.ewaytek.model.DepartmentDemocracy;
import com.ewaytek.model.DepartmentEvaluation;
import com.ewaytek.model.DepartmentProcess;
import com.ewaytek.model.DepartmentTree;
import com.ewaytek.model.Role;
import com.ewaytek.model.StaffProcess;
import com.ewaytek.model.User;
import com.ewaytek.model.pojo.DepartmentDemocracyEx;
import com.ewaytek.model.pojo.DepartmentEvaluationEx;
import com.ewaytek.model.pojo.DepartmentTreeEx;
import com.ewaytek.repository.DepartmentDemocracyRepository;
import com.ewaytek.repository.DepartmentEvaluationRepository;
import com.ewaytek.repository.DepartmentProcessRepository;
import com.ewaytek.repository.DepartmentRepository;
import com.ewaytek.repository.DepartmentTreeRepository;
import com.ewaytek.repository.StaffCommentRepository;
import com.ewaytek.repository.StaffDemocracyRepository;
import com.ewaytek.repository.StaffEvaluationRepository;
import com.ewaytek.repository.StaffProcessRepository;

@Controller
@RequestMapping("/api/department/evaluation")
public class DepartmentEvaluationController {
	
	/**
	 * 上传目录
	 */
	public static final String ROOT = "upload/evaluation";  
	
	@Autowired
	private DepartmentEvaluationRepository departmentEvaluationRepository;
	
	@Autowired
	private DepartmentTreeRepository departmentTreeRepository;
	
	@Autowired
	private DepartmentProcessRepository departmentProcessRepository;
	
	@Autowired
	private StaffEvaluationRepository staffEvaluationRepository;
	
	@Autowired
	private StaffProcessRepository staffProcessRepository;
	
	@Autowired
	private StaffDemocracyRepository staffDemocracyRepository;
	
	@Autowired
	private StaffCommentRepository staffCommentRepository;
	
	@RequestMapping("/list/")
	@ResponseBody
	public Map<String,Object> department(
			@RequestParam(value = "year", defaultValue = "0") Integer year, 
			@RequestParam(value = "name", defaultValue = "") final String name, 
			@RequestParam(value = "page", defaultValue = "1") Integer page, 
			@RequestParam(value = "limit", defaultValue = "10") Integer limit){
		try{
			
			DepartmentProcess departmentProcess = null;
			if(year == 0){
				departmentProcess = departmentProcessRepository.fetchCurrent();
				year = departmentProcess.getYear();
			} else {
				departmentProcess = departmentProcessRepository.findProcessByYear(year);
			}
			
			Pageable pageable = new PageRequest(page - 1, limit);
			
			Page<DepartmentEvaluationEx> list = departmentEvaluationRepository.findDepartmentEvaluation(year, name, pageable);
			
			Map<String, Object> result = new HashMap<String, Object>();
			
			result.put("totalPage", list.getTotalPages());
			result.put("currPage", page);
			result.put("totalCount", list.getTotalElements());
			result.put("list", list.getContent());
			
			return Result.ok().put("page", result).put("process", departmentProcess);
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/info/{id}")
	@ResponseBody
	public Map<String,Object> info(@PathVariable("id") Integer id){
		try{
			DepartmentEvaluation evaluation = departmentEvaluationRepository.findOne(id);
			
			return Result.ok().put("data", evaluation);
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	public int getLayerValue(String comment){
		if(comment.trim().equals("好班子")){
			return 4;
		} else if(comment.trim().equals("较好班子")){
			return 3;
		} else if(comment.trim().equals("一般班子")){
			return 2;
		} else if(comment.trim().equals("差班子")){
			return 1;
		} 
		return 0;
	}
	
	@RequestMapping("/upload/leader")
	@ResponseBody
	public Map<String,Object> uploadLeader(@RequestParam("file") MultipartFile file){
		try{
			
			if(file.isEmpty()){
				return Result.error("上传文件不能为空!");
			}
			
			File dir = new File(ROOT);
			if(!dir.exists()){
				dir.mkdirs();
			}
			
			String filename = String.valueOf(System.currentTimeMillis()) + ".xls";
			Files.copy(file.getInputStream(), Paths.get(ROOT, filename));  
			String url = "/" + ROOT + "/" + filename;
			
			// 获取最新的一条数据
			DepartmentProcess departmentProcess = departmentProcessRepository.fetchCurrent();
			
			if(departmentProcess.getComplete() == 1){
				return Result.error("已经完成考评，不能进行导入!");
			}
			
			// 解析文件
			InputStream inputStream = new FileInputStream(ROOT + "/" + filename);
			HSSFWorkbook hssfWorkbook = new HSSFWorkbook(inputStream);
			
			// 获取需要评价的所有的单位
			List<DepartmentEvaluationEx> listAll = departmentEvaluationRepository.findDepartmentEvaluation(departmentProcess.getYear(), "");
			Map<String, DepartmentEvaluationEx> mapAll = new HashMap<String, DepartmentEvaluationEx>();
			for(int i = 0; i < listAll.size(); i++){
				
				String name = listAll.get(i).getDepName().trim();
				
				mapAll.put(name, listAll.get(i));
			}
			
			List<DepartmentEvaluationEx> departmentEvaluations = new ArrayList<DepartmentEvaluationEx>();
			HSSFSheet sheet = hssfWorkbook.getSheetAt(0);
			if(sheet == null){
				return Result.ok().put("data", departmentEvaluations);
			}
			
			for(int i = 1; i <= sheet.getLastRowNum(); i++){
				HSSFRow row = sheet.getRow(i);
				DepartmentEvaluationEx departmentEvaluation = new DepartmentEvaluationEx();
				
				String depName = row.getCell(0).getStringCellValue().trim();
				departmentEvaluation.setDepName(depName);
				
				int leader = getLayerValue(row.getCell(1).getStringCellValue());
				if(leader == 0){
					departmentEvaluation.setMessage("导入的评价内容不正确");
				}
				departmentEvaluation.setLeader(leader);
				
				
				if(mapAll.containsKey(depName)){
					departmentEvaluation.setDepId(mapAll.get(depName).getDepId());
				} else {
					departmentEvaluation.setMessage("部门名称不存在");
				}
				
				departmentEvaluations.add(departmentEvaluation);
			}
			
			return Result.ok().put("data", departmentEvaluations);
			
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/upload/achievement")
	@ResponseBody
	public Map<String,Object> uploadAchievement(@RequestParam("file") MultipartFile file){
		try{
			
			if(file.isEmpty()){
				return Result.error("上传文件不能为空!");
			}
			
			File dir = new File(ROOT);
			if(!dir.exists()){
				dir.mkdirs();
			}
			
			String filename = String.valueOf(System.currentTimeMillis()) + ".xls";
			Files.copy(file.getInputStream(), Paths.get(ROOT, filename));  
			String url = "/" + ROOT + "/" + filename;
			
			// 获取最新的一条数据
			DepartmentProcess departmentProcess = departmentProcessRepository.fetchCurrent();
			
			if(departmentProcess.getComplete() == 1){
				return Result.error("已经完成考评，不能进行导入!");
			}
			
			// 解析文件
			InputStream inputStream = new FileInputStream(ROOT + "/" + filename);
			HSSFWorkbook hssfWorkbook = new HSSFWorkbook(inputStream);
			
			// 获取需要评价的所有的单位
			List<DepartmentEvaluationEx> listAll = departmentEvaluationRepository.findDepartmentEvaluation(departmentProcess.getYear(), "");
			Map<String, DepartmentEvaluationEx> mapAll = new HashMap<String, DepartmentEvaluationEx>();
			for(int i = 0; i < listAll.size(); i++){
				
				String name = listAll.get(i).getDepName().trim();
				
				mapAll.put(name, listAll.get(i));
			}
			
			List<DepartmentEvaluationEx> departmentEvaluations = new ArrayList<DepartmentEvaluationEx>();
			HSSFSheet sheet = hssfWorkbook.getSheetAt(0);
			if(sheet == null){
				return Result.ok().put("data", departmentEvaluations);
			}
			
			for(int i = 1; i <= sheet.getLastRowNum(); i++){
				HSSFRow row = sheet.getRow(i);
				DepartmentEvaluationEx departmentEvaluation = new DepartmentEvaluationEx();
				
				String depName = row.getCell(0).getStringCellValue().trim();
				departmentEvaluation.setDepName(depName);
				
				int level = 0;
				if(mapAll.containsKey(depName)){
					departmentEvaluation.setDepId(mapAll.get(depName).getDepId());
					level = mapAll.get(depName).getDepLevel();
				} else {
					departmentEvaluation.setMessage("部门名称不存在");
				}
				
				if(level == 1){
					int leader = 0;
					if(row.getCell(1).getCellType() == 1){
						leader = getLayerValue(row.getCell(1).getStringCellValue());
					} else if(row.getCell(1).getCellType() == 0){
						leader = (int) row.getCell(1).getNumericCellValue();
					}
					
					if(leader == 0){
						departmentEvaluation.setMessage("导入的评价内容不正确");
					}
					departmentEvaluation.setLeader(leader);
				} else {
					int leader = (int)row.getCell(1).getNumericCellValue();
					departmentEvaluation.setLeader(leader);
				}
				
				departmentEvaluations.add(departmentEvaluation);
			}
			
			return Result.ok().put("data", departmentEvaluations);
			
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/calc")
	@ResponseBody
	@Transactional
	public Map<String,Object> calc(){
		try {
			// 获取最新的一条数据
			DepartmentProcess departmentProcess = departmentProcessRepository.fetchCurrent();
			
			if(departmentProcess == null){
				return Result.error("还未开始任何考评");
			}
			
			if(departmentProcess.getComplete() == 1){
				return Result.error("已经完成考评，不能进行推算!");
			}
			
			List<DepartmentEvaluation> departmentEvaluations = departmentEvaluationRepository.findCalcDepartmentEvaluation(departmentProcess.getYear());
			
			if(departmentEvaluations.size() > 0){
				return Result.error("单位考评信息还没有填写完毕，清等待保存完毕!");
			}
			
			departmentEvaluations = departmentEvaluationRepository.findDepartmentEvaluation(departmentProcess.getYear());
			
			for(int i = 0; i < departmentEvaluations.size(); i++){
				DepartmentEvaluation departmentEvaluation = departmentEvaluations.get(i);
				
				if(departmentEvaluation.getdFix() != 0){
					departmentEvaluation.setdCalc(departmentEvaluation.getdFix());
				} else {
					if(departmentEvaluation.getDepLevel() == 1){
						// 算法一
					} else {
						// 算法二
					}
					int max = 4;
					max = Math.min(departmentEvaluation.getLeader(), max);
					max = Math.min(departmentEvaluation.getComment(), max);
					max = Math.min(departmentEvaluation.getDemocracy(), max);
					max = Math.min(departmentEvaluation.getAchievement(), max);
					
					departmentEvaluation.setdCalc(max);
					
					if(departmentEvaluation.getdFix() != 0){
						departmentEvaluation.setDfinal(departmentEvaluation.getdFix());
					} else {
						departmentEvaluation.setDfinal(max);
					}
					
					if(max != 4){
						if(departmentEvaluation.getLeader() < departmentEvaluation.getDemocracy()){
							departmentEvaluation.setMark("领导测评低于民主测评");
						}
					}
				}
				departmentEvaluationRepository.save(departmentEvaluation);
			}
			
			return Result.ok("推算完成");
		} catch (Exception e) {
			return Result.error(e.getMessage());
		}
	}
	
	@RequestMapping("/submit")
	@ResponseBody
	@Transactional
	public Map<String,Object> submit(){
		try {
			// 获取最新的一条数据
			DepartmentProcess departmentProcess = departmentProcessRepository.fetchCurrent();
			
			if(departmentProcess == null){
				return Result.error("还未开始任何考评");
			}
			
			if(departmentProcess.getComplete() == 1){
				return Result.error("已经完成考评，不能进行提交!");
			}
			
			List<DepartmentEvaluation> departmentEvaluations = departmentEvaluationRepository.findDepartmentEvaluation(departmentProcess.getYear());
			
			for(int i = 0; i < departmentEvaluations.size(); i++){
				DepartmentEvaluation departmentEvaluation = departmentEvaluations.get(i);
				
				departmentEvaluation.setDfinal(departmentEvaluation.getdCalc());
				
				departmentEvaluationRepository.save(departmentEvaluation);
			}
			
			departmentProcess.setComplete(1);
			departmentProcessRepository.save(departmentProcess);
			
			return Result.ok("提交完成");
		} catch (Exception e) {
			return Result.error(e.getMessage());
		}
	}
	
	/*** 
     * 创建表头 
     * @param workbook 
     * @param sheet 
     */  
    private void createTitle(HSSFWorkbook workbook, HSSFSheet sheet)  
    {  
        HSSFRow row = sheet.createRow(0);  
        //设置列宽，setColumnWidth的第二个参数要乘以256，这个参数的单位是1/256个字符宽度  
        sheet.setColumnWidth(2, 12*256);  
        sheet.setColumnWidth(3, 17*256);  
          
        //设置为居中加粗  
        HSSFCellStyle style = workbook.createCellStyle();  
        HSSFFont font = workbook.createFont();  
        font.setBold(true);  
        style.setAlignment(HSSFCellStyle.ALIGN_CENTER);  
        style.setFont(font);  
          
        HSSFCell cell;  
        cell = row.createCell(0);  
        cell.setCellValue("序号");  
        cell.setCellStyle(style);  
          
        cell = row.createCell(1);  
        cell.setCellValue("部门名称");  
        cell.setCellStyle(style);  
          
        cell = row.createCell(2);  
        cell.setCellValue("部门属性");  
        cell.setCellStyle(style); 
        
        cell = row.createCell(3);  
        cell.setCellValue("考评结果");  
        cell.setCellStyle(style); 
        
        cell = row.createCell(4);  
        cell.setCellValue("考评备注");  
        cell.setCellStyle(style); 
    }
    
    private String getDepLevelName(int depLevel){
    	if(depLevel == 1){
    		return "市(不考评)";
    	} else if(depLevel == 2){
    		return "市(考评)";
    	} else if(depLevel == 3){
    		return "县";
    	} else if(depLevel == 4){
    		return "区";
    	}
    	return "";
    }
    
    private String getDepFinal(int depLevel){
    	if(depLevel == 1){
    		return "差班子";
    	} else if(depLevel == 2){
    		return "一般班子";
    	} else if(depLevel == 3){
    		return "较好班子";
    	} else if(depLevel == 4){
    		return "好班子";
    	}
    	return "";
    }
	
	@RequestMapping("/export/{year}")
	@ResponseBody
	public Map<String,Object> export(@PathVariable("year") int year){
		try {
			// 获取最新的一条数据
			DepartmentProcess departmentProcess = departmentProcessRepository.findProcessByYear(year);
			
			if(departmentProcess == null){
				return Result.error("还未开始任何考评");
			}
			
			if(departmentProcess.getComplete() != 1){
				return Result.error("考评还没有完成，不能进行数据导出!");
			}
			
			// 创建表格
			HSSFWorkbook workbook = new HSSFWorkbook();  
			HSSFSheet sheet = workbook.createSheet("考评结果表");
			createTitle(workbook, sheet);
			
			List<DepartmentEvaluationEx> departmentEvaluations = departmentEvaluationRepository.findDepartmentEvaluationEx(year);
			
			for(int i = 0; i < departmentEvaluations.size(); i++){
				DepartmentEvaluationEx departmentEvaluation = departmentEvaluations.get(i);
				
				HSSFRow row = sheet.createRow(i+1);
				row.createCell(0).setCellValue(i+1);
				row.createCell(1).setCellValue(departmentEvaluation.getDepName());
				row.createCell(2).setCellValue(getDepLevelName(departmentEvaluation.getDepLevel()));
				row.createCell(3).setCellValue(getDepFinal(departmentEvaluation.getDfinal()));
				row.createCell(4).setCellValue("");
			}
			
			String fileName = "考评数据统计表-" + UUID.randomUUID().toString().replaceAll("-", "") + ".xls";
			String dirName = "download/";
			File dir = new File(dirName);
			if(!dir.exists()){
				dir.mkdirs();
			}
			
			FileOutputStream fs = new FileOutputStream(dirName + fileName);
			workbook.write(fs);
			
			return Result.ok("导出完成").put("url", "/" + dirName + fileName);
		} catch (Exception e) {
			return Result.error(e.getMessage());
		}
	}
	
	@RequestMapping("/save/info")
	@ResponseBody
	public Map<String,Object> saveInfo(@RequestBody DepartmentEvaluation evaluation){
		try {
			if(evaluation.getId() != 0){				
				departmentEvaluationRepository.save(evaluation);
				
				return Result.ok("保存成功");
			} else {
				return Result.error("保存失败");
			}
		} catch (Exception e) {
			return Result.error(e.getMessage());
		}
	}
	
	@RequestMapping("/save/leader")
	@ResponseBody
	public Map<String,Object> saveLeader(@RequestBody List<DepartmentEvaluationEx> list){
		try{
			
			// 获取最新的一条数据
			DepartmentProcess departmentProcess = departmentProcessRepository.fetchCurrent();
			
			List<DepartmentEvaluation> listAll = departmentEvaluationRepository.findDepartmentEvaluation(departmentProcess.getYear());
			Map<Integer, DepartmentEvaluation> mapAll = new HashMap<Integer, DepartmentEvaluation>();
			for(int i = 0; i < listAll.size(); i++){
				mapAll.put(listAll.get(i).getDepId(), listAll.get(i));
			}
			
			for(int i = 0; i < list.size(); i++){
				
				DepartmentEvaluationEx departmentEvaluationEx = list.get(i);
				
				if(departmentEvaluationEx.getMessage() != null && !departmentEvaluationEx.getMessage().equals("") ){
					continue;
				}
				
				DepartmentEvaluation departmentEvaluation = null;
				
				if(mapAll.containsKey(departmentEvaluationEx.getDepId())){
					departmentEvaluation = mapAll.get(departmentEvaluationEx.getDepId());
					
					departmentEvaluation.setLeader(departmentEvaluationEx.getLeader());
					
					// 计算公式，计算最终结果
					departmentEvaluationRepository.save(departmentEvaluation);
				}
			}
			
			return Result.ok("保存成功");
			
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/save/achievement")
	@ResponseBody
	public Map<String,Object> saveAchievement(@RequestBody List<DepartmentEvaluationEx> list){
		try{
			
			// 获取最新的一条数据
			DepartmentProcess departmentProcess = departmentProcessRepository.fetchCurrent();
			
			List<DepartmentEvaluation> listAll = departmentEvaluationRepository.findDepartmentEvaluation(departmentProcess.getYear());
			Map<Integer, DepartmentEvaluation> mapAll = new HashMap<Integer, DepartmentEvaluation>();
			for(int i = 0; i < listAll.size(); i++){
				mapAll.put(listAll.get(i).getDepId(), listAll.get(i));
			}
			
			for(int i = 0; i < list.size(); i++){
				
				DepartmentEvaluationEx departmentEvaluationEx = list.get(i);
				
				if(departmentEvaluationEx.getMessage() != null && !departmentEvaluationEx.getMessage().equals("") ){
					continue;
				}
				
				DepartmentEvaluation departmentEvaluation = null;
				
				if(mapAll.containsKey(departmentEvaluationEx.getDepId())){
					departmentEvaluation = mapAll.get(departmentEvaluationEx.getDepId());
					
					departmentEvaluation.setAchievement(departmentEvaluationEx.getLeader());
					
					// 计算公式，计算最终结果
					departmentEvaluationRepository.save(departmentEvaluation);
				}
			}
			
			return Result.ok("保存成功");
			
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/save")
	@ResponseBody
	public Map<String,Object> save(@RequestBody List<DepartmentEvaluationEx> list){
		try{
			
			// 获取最新的一条数据
			DepartmentProcess departmentProcess = departmentProcessRepository.fetchCurrent();
			
			if(departmentProcess.getDemocracy() == 1){
				return Result.error("已经完成民主测评，不需要在进行民主测评导入!");
			}
			
			List<DepartmentEvaluation> listAll = departmentEvaluationRepository.findDepartmentEvaluation(departmentProcess.getYear());
			Map<Integer, DepartmentEvaluation> mapAll = new HashMap<Integer, DepartmentEvaluation>();
			for(int i = 0; i < listAll.size(); i++){
				mapAll.put(listAll.get(i).getDepId(), listAll.get(i));
			}
			
			for(int i = 0; i < list.size(); i++){
				
				DepartmentEvaluationEx departmentEvaluationEx = list.get(i);
				
				if(departmentEvaluationEx.getMessage() != null && !departmentEvaluationEx.getMessage().equals("") ){
					continue;
				}
				
				DepartmentEvaluation departmentEvaluation = null;
				
				if(mapAll.containsKey(departmentEvaluationEx.getDepId())){
					departmentEvaluation = mapAll.get(departmentEvaluationEx.getDepId());
					
					departmentEvaluation.setLeader(departmentEvaluationEx.getLeader());
					departmentEvaluation.setComment(departmentEvaluationEx.getComment());
					departmentEvaluation.setDfinal(departmentEvaluationEx.getDfinal());
					
					// 计算公式，计算最终结果
					departmentEvaluationRepository.save(departmentEvaluation);
				}
			}
			
			return Result.ok("保存成功");
			
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/staff/{year}")
	@ResponseBody
	public Map<String,Object> staff(@PathVariable("year") int year){
		try{
			// 检测
			StaffProcess staffProcess = staffProcessRepository.findProcessByYear(year);
			if(staffProcess != null && staffProcess.getComplete() == 1){
				return Result.ok("员工考核已经结束，不能重新开始考核!");
			}
			
			// 删除当年信息
			if(staffProcess != null){
				staffProcessRepository.delete(staffProcess);
			}
			staffEvaluationRepository.deleteStaffEvaluationByYear(year);
			staffDemocracyRepository.deleteStaffDemocracyByYear(year);
			staffCommentRepository.deleteStaffCommentByYear(year);
			
			// 创建新的信息
			staffEvaluationRepository.createStaffEvaluationByYear(year);
			staffDemocracyRepository.createStaffDemocracyByYear(year);
			staffCommentRepository.createStaffCommentByYear(year);
			
			staffProcess = new StaffProcess();
			staffProcess.setCharge(0);
			staffProcess.setDemocracy(0);
			staffProcess.setComplete(0);
			staffProcess.setYear(year);
			staffProcessRepository.save(staffProcess);
			
			return Result.ok("保存成功");
		} catch (Exception e){
			e.printStackTrace();
			return Result.error("保存失败");
		}
	}
}
