package com.ewaytek.manage.api.controller.staff;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ewaytek.common.utils.Result;
import com.ewaytek.common.utils.ShiroUtils;
import com.ewaytek.common.validator.ValidatorUtils;
import com.ewaytek.common.validator.group.AddGroup;
import com.ewaytek.common.validator.group.UpdateGroup;
import com.ewaytek.model.Staff;
import com.ewaytek.model.StaffComment;
import com.ewaytek.model.StaffDemocracy;
import com.ewaytek.model.StaffEvaluation;
import com.ewaytek.model.StaffProcess;
import com.ewaytek.model.User;
import com.ewaytek.repository.StaffCommentRepository;
import com.ewaytek.repository.StaffDemocracyRepository;
import com.ewaytek.repository.StaffEvaluationRepository;
import com.ewaytek.repository.StaffProcessRepository;
import com.ewaytek.repository.StaffRepository;

@Controller
@RequestMapping("/api/department/staff/process")
public class StaffProcessController {
	
	@Autowired
	private StaffProcessRepository staffProcessRepository;
	
	@Autowired
	private StaffDemocracyRepository staffDemocracyRepository;
	
	@Autowired
	private StaffCommentRepository staffCommentRepository;
	
	@Autowired
	private StaffEvaluationRepository staffEvaluationRepository;
	
	/**
	 * 查询每年的进度信息
	 * @param year	年份
	 * @return
	 */
	@RequestMapping("/info")
	@ResponseBody
	public Map<String,Object> info(){
		try{
			// 获取当前用户
			User user = ShiroUtils.getUserEntity();
			
			int depId = user.getDepId();
			
			StaffProcess staffProcess = staffProcessRepository.fetchCurrent();
			
			// 数据不为空，且已经有结果，需要统计总体的数据
			if(staffProcess != null && staffProcess.getComplete() == 1){
				// 计算年度统计
				List<Integer> results = new ArrayList<Integer>();
				for(int i = 0; i < 4; i++){
					results.add(0);
				}
				
				// 获取所有考核的部门并计算结果
				List<StaffEvaluation> staffEvaluations = staffEvaluationRepository.findStaffEvaluation(staffProcess.getYear(), depId);
				for(int i = 0; i < staffEvaluations.size(); i++){
					StaffEvaluation evaluation = staffEvaluations.get(i);
					
					int dCount = results.get(evaluation.getDfinal() - 1) + 1;
					results.set(evaluation.getDfinal() - 1, dCount);
				}
				
				return Result.ok().put("data", staffProcess).put("total", results);
			} else {
				return Result.ok().put("data", staffProcess);
			}
			
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	/**
	 * 查询每年的进度信息
	 * @param year	年份
	 * @return
	 */
	@RequestMapping("/years")
	@ResponseBody
	public Map<String,Object> years(){
		try{
			List<Integer> years = staffProcessRepository.findDistinctYear();
			return Result.ok().put("data", years);
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	/**
	 * 查询每年的进度信息
	 * @param year	年份
	 * @return
	 */
	@RequestMapping("/info/{year}")
	@ResponseBody
	public Map<String,Object> info(@PathVariable("year") Integer year){
		try{
			// 获取当前用户
			User user = ShiroUtils.getUserEntity();
			
			int depId = user.getDepId();
			
			StaffProcess staffProcess = staffProcessRepository.findProcessByYear(year);
			
			// 数据不为空，且已经有结果，需要统计总体的数据
			if(staffProcess != null && staffProcess.getComplete() == 1){
				// 计算年度统计
				List<Integer> results = new ArrayList<Integer>();
				for(int i = 0; i < 4; i++){
					results.add(0);
				}
				
				// 获取所有考核的部门并计算结果
				List<StaffEvaluation> staffEvaluations = staffEvaluationRepository.findStaffEvaluation(year, depId);
				for(int i = 0; i < staffEvaluations.size(); i++){
					StaffEvaluation evaluation = staffEvaluations.get(i);
					
					int dCount = results.get(evaluation.getDfinal() - 1) + 1;
					results.set(evaluation.getDfinal() - 1, dCount);
				}
				
				return Result.ok().put("data", staffProcess).put("total", results);
			} else {
				return Result.ok().put("data", staffProcess);
			}
			
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
}
