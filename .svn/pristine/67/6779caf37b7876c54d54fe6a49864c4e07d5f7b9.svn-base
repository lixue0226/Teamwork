package com.ewaytek.manage.api.controller.cms;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang.ArrayUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.crypto.hash.Md5Hash;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ewaytek.common.utils.Result;
import com.ewaytek.common.utils.ShiroUtils;
import com.ewaytek.common.validator.Assert;
import com.ewaytek.common.validator.ValidatorUtils;
import com.ewaytek.common.validator.group.AddGroup;
import com.ewaytek.common.validator.group.UpdateGroup;
import com.ewaytek.model.Notice;
import com.ewaytek.model.User;
import com.ewaytek.repository.NoticeRepository;
import com.ewaytek.repository.UserRepository;
import com.google.code.kaptcha.Constants;

@Controller
@RequestMapping("/api/notice")
public class NoticeController {
	
	@Autowired
	private NoticeRepository noticeRepository;

	@RequestMapping(value="/list/{type:.+}")
	@ResponseBody
	public Map<String,Object> list(
			@PathVariable(value = "type") final Integer type, 
			@RequestParam(value = "title", defaultValue = "") final String title, 
			@RequestParam(value = "page", defaultValue = "1") Integer page, 
			@RequestParam(value = "limit", defaultValue = "10") Integer  limit) {
		
		try{
			Pageable pageable = new PageRequest(page - 1, limit);
			
			Specification<Notice> condtions = new Specification<Notice>(){

				@Override
				public Predicate toPredicate(Root<Notice> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
					Predicate titlePredicate = cb.like(root.get("title").as(String.class), "%"+ title +"%");
					Predicate typePredicate = cb.equal(root.get("category").as(Integer.class), type);
					query.where(titlePredicate, typePredicate);
					return query.getRestriction();
				}
				
			};
			
			Map<String, Object> result = new HashMap<String, Object>();
			
			Page<Notice> list = noticeRepository.findAll(condtions, pageable);
			
			result.put("totalPage", list.getTotalPages());
			result.put("currPage", page);
			result.put("totalCount", list.getTotalElements());
			result.put("list", list.getContent());
			
			return Result.ok().put("page", result);
			
		} catch (Exception e){
			return Result.ok().put("page", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/info/{id}")
	@ResponseBody
	public Map<String,Object> info(@PathVariable("id") Integer id){
		try{
			Notice notice = noticeRepository.findOne(id);
			
			return Result.ok().put("data", notice);
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/save")
	@ResponseBody
	public Map<String,Object> info(@RequestBody Notice notice){
		try {
			if(notice.getId() == 0){
				// add
				ValidatorUtils.validateEntity(notice, AddGroup.class);
				
				notice.setCreateAt(new Date());
				notice.setCreator(ShiroUtils.getUserEntity().getUsername());
				noticeRepository.save(notice);
				
				return Result.ok("添加成功");
			} else {
				// edit
				ValidatorUtils.validateEntity(notice, UpdateGroup.class);
				
				noticeRepository.save(notice);
				
				return Result.ok("修改成功");
			}
		} catch (Exception e) {
			return Result.error(e.getMessage());
		}
	}
	
	@RequestMapping("/delete")
	@ResponseBody
	public Map<String,Object> delete(@RequestBody Integer[] ids){
		
		for (Integer id : ids) {
			noticeRepository.delete(id);
		}
		
		return Result.ok("删除成功");
	}
}
