package com.ewaytek.manage.api.controller.sys;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang.ArrayUtils;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.crypto.hash.Md5Hash;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ewaytek.common.utils.Result;
import com.ewaytek.common.utils.ShiroUtils;
import com.ewaytek.common.validator.Assert;
import com.ewaytek.common.validator.ValidatorUtils;
import com.ewaytek.common.validator.group.AddGroup;
import com.ewaytek.common.validator.group.UpdateGroup;
import com.ewaytek.model.User;
import com.ewaytek.repository.UserRepository;
import com.google.code.kaptcha.Constants;

@Controller
@RequestMapping("/api/user")
public class UserController {
	
	@Autowired
	private UserRepository userRepository;

	@RequestMapping(value="/password",method=RequestMethod.POST)
	@ResponseBody
	public Map<String,Object> login(String password, String newPassword, String confirmPassword) {
		// 验证码检测
		try {
			Assert.isBlank(password, "原密码不能为空!");
			Assert.isBlank(newPassword, "新密码不能为空!");
			Assert.isBlank(confirmPassword, "确认密码不能为空!");
			
			if(!newPassword.equals(confirmPassword)){
				return Result.error("新密码和确认密码不一致!");
			}
			
			User user = ShiroUtils.getUserEntity();
			
			Md5Hash hash = new Md5Hash(password, "ewaytek", 2);
			if(!hash.toString().equals(user.getPassword())){
				return Result.error("原密码输入错误!");
			}
			
			Md5Hash newhash = new Md5Hash(newPassword, "ewaytek", 2);
			userRepository.updatePassword(user.getId(), newhash.toString());
	        
	        return Result.ok("密码修改成功");
	    
		} catch (Exception e) {
			return Result.error("密码修改失败!");
		}
	}

	@RequestMapping(value="/list")
	@ResponseBody
	public Map<String,Object> list(
			@RequestParam(value = "username", defaultValue = "") final String username, 
			@RequestParam(value = "page", defaultValue = "1") Integer page, 
			@RequestParam(value = "limit", defaultValue = "10") Integer  limit) {
		
		try{
			Pageable pageable = new PageRequest(page - 1, limit);
			
			Specification<User> condtions = new Specification<User>(){

				@Override
				public Predicate toPredicate(Root<User> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
					Predicate usernamePredicate = cb.like(root.get("username").as(String.class), "%"+ username +"%");
					Predicate typePredicate = cb.equal(root.get("type").as(Integer.class), 0);
					query.where(typePredicate, usernamePredicate);
					return query.getRestriction();
				}
				
			};
			
			Map<String, Object> result = new HashMap<String, Object>();
			
			Page<User> list = userRepository.findAll(condtions, pageable);
			
			result.put("totalPage", list.getTotalPages());
			result.put("currPage", page);
			result.put("totalCount", list.getTotalElements());
			result.put("list", list.getContent());
			
			return Result.ok().put("page", result);
			
		} catch (Exception e){
			return Result.ok().put("page", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/info/{id}")
	@ResponseBody
	public Map<String,Object> info(@PathVariable("id") String id){
		try{
			User user = userRepository.findOne(id);
			user.setPassword("");
			
			return Result.ok().put("data", user);
		} catch (Exception e){
			return Result.ok().put("data", new HashMap<String, Object>());
		}
	}
	
	@RequestMapping("/save")
	@ResponseBody
	public Map<String,Object> info(@RequestBody User user){
		try {
			if(user.getId() == null){
				// add
				ValidatorUtils.validateEntity(user, AddGroup.class);
				user.setType(0);
				user.setDepId(0);
				
				User exist = userRepository.findUserByUsername(user.getUsername());
				if(exist != null){
					return Result.error("用户名已存在!");
				}
				
				Md5Hash hash = new Md5Hash(user.getPassword(), "ewaytek", 2);
				user.setPassword(hash.toString());
				
				userRepository.save(user);
				
				return Result.ok("添加成功");
			} else {
				// edit
				ValidatorUtils.validateEntity(user, UpdateGroup.class);
				
				User userOld = userRepository.findOne(user.getId());
				userOld.setEmail(user.getEmail());
				userOld.setRole(user.getRole());
				
				if(user.getPassword() != null){
					Md5Hash hash = new Md5Hash(user.getPassword(), "ewaytek", 2);
					userOld.setPassword(hash.toString());
				}
				
				userRepository.save(userOld);
				
				return Result.ok("修改成功");
			}
		} catch (Exception e) {
			return Result.error(e.getMessage());
		}
	}
	
	@RequestMapping("/delete")
	@ResponseBody
	public Map<String,Object> delete(@RequestBody String[] ids){
		if(ArrayUtils.contains(ids, "1")){
			return Result.error("系统管理员不能删除");
		}
		
		if(ArrayUtils.contains(ids, ShiroUtils.getUserId())){
			return Result.error("当前用户不能删除");
		}
		
		for (String id : ids) {
			userRepository.delete(id);
		}
		
		return Result.ok("删除成功");
	}
}
