package com.ewaytek.manage.controller;

import java.util.HashMap;
import java.util.Map;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.commons.lang.StringEscapeUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.ewaytek.model.Advertisement;
import com.ewaytek.model.Notice;
import com.ewaytek.repository.AdvertisementRepository;
import com.ewaytek.repository.NoticeRepository;

@Configuration
@Controller
public class FrontViewController {

	@Autowired
	private NoticeRepository noticeRepository;
	
	@Autowired
	private AdvertisementRepository advertisementRepository;
	
	@RequestMapping("/")
	public String index(ModelMap map){
		
		Page<Advertisement> listAd = getAd();
		Page<Notice> listNotice1 = getNotice(1, 3, 1);
		Page<Notice> listNotice2 = getNotice(2, 3, 1);
		
		map.addAttribute("ad", listAd.getContent());
		map.addAttribute("notice1", listNotice1.getContent());
		map.addAttribute("notice2", listNotice2.getContent());
		
		return "front/index";
	}
	
	@RequestMapping("/notice/{type}")
	public String list(ModelMap map, 
			@PathVariable Integer type, 
			@RequestParam(value = "page", defaultValue = "1") Integer page){
		
		Page<Notice> listNotice = getNotice(type, 20, page);
		
		map.addAttribute("notice", listNotice);
		map.addAttribute("currentpage", page);
		
		if(type == 1){
			map.addAttribute("name", "通知");
		} else if(type == 2){
			map.addAttribute("name", "公告");
		} else if(type == 3){
			map.addAttribute("name", "下载");
		} else {
			map.addAttribute("name", "");
		}
		
		return "front/list";
	}
	
	@RequestMapping("/notice/info/{id}")
	public String info(ModelMap map, 
			@PathVariable Integer id){
		
		Notice notice = noticeRepository.findOne(id);
		
		// notice.setContent(StringEscapeUtils.unescapeHtml(notice.getContent()));
		map.addAttribute("notice", notice);
		
		return "front/info";
	}

	private Page<Advertisement> getAd() {
		Pageable pageable = new PageRequest(0, 3);
		
		Specification<Advertisement> condtions = new Specification<Advertisement>(){

			@Override
			public Predicate toPredicate(Root<Advertisement> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				Predicate showPredicate = cb.equal(root.get("isShow").as(Integer.class), 1);
				query.where(showPredicate);
				query.orderBy(cb.desc(root.get("id").as(Integer.class)));
				return query.getRestriction();
			}
			
		};
		
		Page<Advertisement> list = advertisementRepository.findAll(condtions, pageable);
		return list;
	}
	
	private Page<Notice> getNotice(Integer type, int size, int page) {
		Pageable pageable = new PageRequest(page - 1, size);
		
		Specification<Notice> condtions = new Specification<Notice>(){

			@Override
			public Predicate toPredicate(Root<Notice> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				Predicate categoryPredicate = cb.equal(root.get("category").as(Integer.class), type);
				query.where(categoryPredicate);
				query.orderBy(cb.desc(root.get("id").as(Integer.class)));
				return query.getRestriction();
			}
			
		};
		
		Page<Notice> list = noticeRepository.findAll(condtions, pageable);
		return list;
	}
}
